"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = require('./plugin');
var JPush = (function () {
    function JPush() {
    }
    JPush.init = function () { return; };
    JPush.stopPush = function () { return; };
    JPush.resumePush = function () { return; };
    JPush.isPushStopped = function () { return; };
    JPush.getRegistrationID = function () { return; };
    JPush.setTagsWithAlias = function (tags, alias) { return; };
    JPush.setTags = function (tags) { return; };
    JPush.setAlias = function (alias) { return; };
    JPush.getUserNotificationSettings = function () { return; };
    JPush.openNotification = function () {
        return new Promise(function (observer) {
            addEventListener('jpush.openNotification', function (event) { return event; }, false);
        });
    };
    JPush.receiveNotification = function () {
        return new Promise(function (observer) {
            addEventListener('jpush.receiveNotification', function (event) { return event; }, false);
        });
    };
    JPush.receiveMessage = function () {
        return new Promise(function (observer) {
            addEventListener('jpush.receiveMessage', function (event) { return event; }, false);
        });
    };
    __decorate([
        plugin_1.Cordova()
    ], JPush, "init", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "stopPush", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "resumePush", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "isPushStopped", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "getRegistrationID", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "setTagsWithAlias", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "setTags", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "setAlias", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "getUserNotificationSettings", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "openNotification", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "receiveNotification", null);
    __decorate([
        plugin_1.Cordova()
    ], JPush, "receiveMessage", null);
    JPush = __decorate([
        plugin_1.Plugin({
            plugin: 'jpush-phonegap-plugin',
            pluginRef: 'plugins.jPushPlugin',
            repo: 'https://github.com/jpush/jpush-phonegap-plugin',
            platforms: ['Android', 'iOS']
        })
    ], JPush);
    return JPush;
}());
exports.JPush = JPush;
//# sourceMappingURL=j-push.js.map